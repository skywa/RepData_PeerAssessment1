(.95-1)/1
qnorm(.75, mean =1020, sd=50)
pnorm(5, mean=1, sd=2, lower.tail=FALSE)
ppois(3, lambda = 2.5*4)
ppois(40, labmday = 9*5)
ppois(40, labmda = 9*5)
ppois(40, lambda = 9*5)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
plot(means)
plot(means,type="l")
means <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
plot(means,type="l")
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(father.son)
x <-father.son$fheight
(mean(x)+c(-1,1)*qnorm(.975))
(mean(x)+c(-1,1)*qnorm(.975)*sd(x)/sqrt(length(x)))
poisson.test(10,60)$conf.int
poisson.test(10*60,60)$conf.int
poisson.test(10*60,60)
pnorm(93, 100, 10)
pnorm(.95, 100, 10)
qnorm(.95, 100, 10)
pnorm(qnorm(.95, 100, 10)/sqrt(50), 100, 10)
qnorm(.95, 100, 10/50)
qnorm(.95, 100, 10/sqrt(50)
)
pbinom(4, prob=6, lower.tail=FALSE)
pbinom(4, prob=.5, size=6, lower.tail=FALSE)
pbinom(5, prob=.5, size=6, lower.tail=FALSE)
pbinom(4
, prob=.5, size=6, lower.tail=FALSE)
pnorm(.51, .5, sqrt(1/12/100), lower.tail=FALSE)
mean((1:6-3.5)^2)
ppois(20, 16.5*2)
library(swirl)
swirl()
dice_sqr
ex2_fair<-sum(dice_sqr*PDF)
dice_fair
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5^2
sum(edh^2)-3.5^2
sum(dice_high * dice_sqr) - edh^2
sd''
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/sqrt(2*10)
1/2* sqrt(10)
1/(2* sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
pnorm(70,80,10)
qnorm(.95, 1100, 75)
qnorm(.95, 1100, 7.5)
pbinom(4)
?pbinom
rbinom(5,5,.5)
pbinom(5,5,.5)
pbinom(5,4,.5)
pbinom(4,5,.5)
ppois(10,5*3)
library(swirl)
swirl()
choose(5,3)*.8^3*.2^2
choose(5,3:5)*.8^3:5*.2^2:0
choose(5,3)*.8^3*.2^2+choose(5,4)*.8^4*.2^1+choose(5,5)*.8^5*.2^0
pbinom(2,5,.8,lower.tail=FALSE)
qnorm(10)
qnorm(.1)
0
qnorm(.975,3,2)
3+2*.975
3+2*1.96
pnorm(1200, 1020, 50, lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75, 1020, 50)
.53
.53
ppois(3,2.5*4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6+c(-1,1)*qnorm(.975)*1/10
.6+c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb=94.32/5
lamb<-94.32/5
lamb<-5/94/32
lamb<-5/94.32
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb)
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.text(5,94.32)$conf
poisson.test(5,94.32)$conf
library(OnRampsR)
library(SDSFoundations)
world <- WorldBankData
View(world)
world$rural.population[world$country == Aruba & world$year == 1970]
world$rural.population[world$Country == Aruba & world$year == 1970]
world$rural.population[world$Country == "Aruba" & world$year == 1970]
world$year[world$Country == "Australia" & world$mobile.users > 0]
names(world)
names(world$Country)
unique(world$Country)
us <- world[world$Country == "United States"]
us <- world[world$Country == "United States",]
us_select <- us[us$year >=1990 & us$year <=1999,]
us_select <- us[us$year >=1990,]
us_select_10 <- us[us$year >=1990 & us$year <=1999,]
us <- world[world$Country.Code == "USA",]
# Select the years from 1990 and name the new data frame "us_select"
us_select <- us[us$year >= 1990, ]
# Make the number of users more interpretable (into millions)
us_select$internet.mil <- us_select$internet.users / 1000000
# Create a new variable that is "years since 1990"
us_select$time <- us_select$year - 1990
# Select the first 10 years (from 1990 to 1999) and name the new data frame "us_select_10"
us_select_10 <- us_select[us_select$time < 10,]
# Use a function to fit an exponential and logistic model for 1990-1999
expFit(us_select_10$time, us_select_10$internet.mil)
logisticFit(us_select_10$time, us_select_10$internet.mil)
# Based on the prior model parameters, predict the number of internet users in 2006
e <- expFitPred(us_select_10$time, us_select_10$internet.mil, 16)
l <- logisticFitPred(us_select_10$time, us_select_10$internet.mil, 16)
# Show how many internet users the US actually had in 2006
us_select[us_select$time == 16, c("Country", "year", "internet.mil")]
# Calculate the residuals for each model
us_select$internet.mil[us_select$time == 16] - e
us_select$internet.mil[us_select$time == 16] - l
# Look at the model fits for all available data (1990 to 2012)
expFit(us_select$time, us_select$internet.mil)
logisticFit(us_select$time, us_select$internet.mil)
# Which model fits the best?
tripleFit(us_select$time, us_select$internet.mil)
# How many internet users would the US have had in 2012 if you had used the original exponential model?
expFitPred(us_select_10$time, us_select_10$internet.mil, 22)
expFit(us_select_10$time, us_select_10$internet.mil)
logisticFit(us_select_10$time, us_select_10$internet.mil)
e <- expFitPred(us_select_10$time, us_select_10$internet.mil, 16)
us_select[us_select$year == 2006]
us_select$internet.users[us_select$year == 2006]
e <- expFitPred(us_select_10$time, us_select_10$internet.mil, 16)
l <- logisticFitPred(us_select_10$time, us_select_10$internet.mil, 16)
us_select[us_select$time == 16, c("Country", "year", "internet.mil")]
us_select$internet.mil[us_select$time == 16] - e
us_select$internet.mil[us_select$time == 16] - l
expFit(us_select$time, us_select$internet.mil)
logisticFit(us_select$time, us_select$internet.mil)
# Which model fits the best?
tripleFit(us_select$time, us_select$internet.mil)
e <- expFitPred(us_select_10$time, us_select_10$internet.mil, 16)
expFitPred(us_select_10$time, us_select_10$internet.mil, 22)
library(SDSFoundations)
world <- WorldBankData
world$internet.perc <- world$internet.users/world$population
world_select <- world[world$year >= 1990, ]
world$yrs.since.1990 <- world$year-1990
world_select$time <- world_select$year-1990
denmark_select <- world_select[world_select$Country == "Denmark",]
belarus_select <- world_select[world_select$Country == "Belarus",]
tripleFit(denmark_select$time, denmark_select$internet.perc)
expFit(denmark_select$time, denmark_select$internet.perc)
logisticFit(denmark_select$time, denmark_select$internet.perc)
expFit(belarus_select$time, belarus_select$internet.perc)
logisticFit(belarus_select$time, belarus_select$internet.perc)
logisticFitPred(denmark_select$time, denmark_select$internet.perc,0.1)
logisticFitPred(denmark_select$time, denmark_select$internet.perc,0.1)+1990
logisticFitPred(belarus_select$time, belarus_select$internet.perc,0.1)+1990
den <- logisticFit(denmark_select$time, denmark_select$internet.perc)
den
-log((den$C/0.1-1)/den$a)/log(b)+1990
-log((den$C/0.1-1)/den$a)/log(den$b)+1990
bel <- logisticFit(belarus_select$time, belarus_select$internet.perc)
-log((bel$C/0.1-1)/bel$a)/log(bel$b)+1990
-log((den$C/0.8-1)/den$a)/log(den$b)+1990
-log((bel$C/0.8-1)/bel$a)/log(bel$b)+1990
world$mobile.users[world$Country == "Brazil" & world$year == 2000]/1000000
world$year[world$Country == "Brazil" & world$mobile.users > 100000000]
brazil_select <- world[world$Country == "Brazil" & world$year >=1995]
brazil_select$time <- brazil_select$year - 1995
names(brazil_select)
brazil_select <- world[world$Country == "Brazil" & world$year >=1995]
brazil_select <- world[world$Country == "Brazil" & world$year >=1995,]
brazil_select$time <- brazil_select$year - 1995
brazil_select$time
tripleFit(brazil_select$time, brazil_select$mobile.users)
pred <- logisticFitPred(brazil_select$time, brazil_select$mobile.users,2025-1995)
pred
pred <- logisticFitPred(brazil_select$time, brazil_select$mobile.users,2025-1995)/1000000
pred
x = [1,3,7]
y = [25, 45, 147]
tripleFit(x,y)
y = [25, 45, 147]
tripleFit(x,y)
x
y
x = c(1,3,7)
y = c(25, 45, 147)
tripleFit(x,y)
setwd("C:/Users/swaye/Desktop/mooc/Coursera/5_Reproducible_Research/Project 1/RepData_PeerAssessment1")
activity <- read.csv("activity.csv", na.strings = "NA")
activity$date <- as.Date(activity$date)
days <- unique(activity$date)
sums <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
means <- round(tapply(activity$steps, activity$date, mean, na.rm=TRUE), digits = 2)
medians <- round(tapply(activity$steps, activity$date, median, na.rm=TRUE), digits = 2)
stepstats <- data.frame(sums, means, medians)
colnames(stepstats) <- c("sum", "mean", "median")
hist(sums, main="Histogram of Total Steps per Day", ylab="Days", xlab="Number of Steps", col="red", breaks=8)
stepstats
intervals <- unique(activity$interval)
daysteps <- data.frame(tapply(activity$steps, activity$interval, mean, na.rm=TRUE))
colnames(daysteps) <- "mean.steps"
plot(intervals, daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 minute intervals")
maxsteps <- daysteps[daysteps$mean.steps == max(daysteps$mean.steps),1]
maxsteps
mean(steps)
mean(activity$steps)
mean(activity$steps,rm.na=T)
mean(activity$steps,na.rm=T)
means
mean(sums)
median(sums)
?seq.POSIXt
?seq.POSIXct
times <- seq("00:00","23:55" by="5 minutes"")
times <- seq("00:00","23:55", by="5 minutes"")
times <- seq("00:00","23:55", by="5 minutes")
daysteps <- data.frame(tapply(activity$steps, activity$interval, mean, na.rm=TRUE))
times <- seq("00:00","23:55", by="5 minutes")
times <- seq(ISOdate(2012,10,1), length.out = 288)
times <- seq(ISOdate(2012,10,1), by="5 minutes",length.out = 288)
times <- seq(ISOdate(2012,10,1), by="5 min",length.out = 288)
times
plot(times, daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals")
size(times)
dim(times)
length(times)
daysteps
library(lubridate)
time_int <- h(times)
time_int <- hours(times)
time_int
length(time_int)
plot(time_int,daysteps$mean.steps)
class(time_int)
class(times)
time_int <- hm(times)
time_int <- hms(times)
plot(intervals, daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals")
daysteps <- data.frame(tapply(activity$steps, activity$interval, mean, na.rm=TRUE))
intervals <- unique(activity$interval)
daysteps <- data.frame(tapply(activity$steps, activity$interval, mean, na.rm=TRUE))
colnames(daysteps) <- "mean.steps"
plot(intervals, daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals")
?plot
axis(labels=c("0:00","5:00","10:00","3:00","20:00"))
axis(x,labels=c("0:00","5:00","10:00","3:00","20:00"))
axis(intervals,labels=c("0:00","5:00","10:00","3:00","20:00"))
axis(1,labels=c("0:00","5:00","10:00","3:00","20:00"))
axis(1,at=c(0,300,600,900,1200,1500,1800,2100,2355),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
plot(intervals, daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals")
axis(1,at=c(0,300,600,900,1200,1500,1800,2100,2355),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
intervals
plot(intervals, daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=c(0,300,600,900,1200,1500,1800,2100,2355),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
plot(seq(0,287), daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=c(0,300,600,900,1200,1500,1800,2100,2355),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
intervals
as.numeric(intervals)
as.factor(intervals)
x <- as.factor(intervals)
x
plot(x,daaysteps$mean.steps)
plot(x,daysteps$mean.steps)
288/8
plot(seq(0,287), daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=seq(0,287,by=288/8),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
288/9
plot(seq(0,287), daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=seq(0,287,by=288/9),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
seq(0,287,9)
plot(seq(0,287), daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=seq(0,287,by=288/32),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
288/9
axis(1,at=seq(0,287,by=32),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
seq(0,287,by=32)
axis(1,at=seq(0,287,by=36),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
plot(seq(0,287), daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=seq(0,287,by=36),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
axis(1,at=seq(0,288,by=36),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
axis(1,at=c(seq(0,254,by=36),287),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
plot(seq(0,287), daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=c(seq(0,254,by=36),287),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
length(activity$steps)-complete.cases(activity)
length(activity$steps)-length(complete.cases(activity))
complete.cases(activity)
length(activity$steps)-sum(complete.cases(activity))
sum(complete.cases(activity))
dim(activity)
is.na(activity)
sum(is.na(activity))
?complete.cases
sum(complete.cases(activity) != is.na(activity))
sum(complete.cases(activity) = is.na(activity))
sum(complete.cases(activity) == is.na(activity))
sum(complete.cases(activity) == is.na(activity))
dim(activity$steps)[1]-sum(complete.cases(activity))
dim(activity$steps)[1]-sum(complete.cases(activity))
dim(activity$steps)-sum(complete.cases(activity))
dim(activity)[1]-sum(complete.cases(activity))
stopifnot(complete.cases(activity) != is.na(activity))
sum(complete.cases(activity) == is.na(activity))
sum(is.na(activity))
intervals
?replace
activity_na <- activity
activity_na$steps[is.na(activity_na$steps)]
activity_na$interval[is.na(activity_na$steps)] <-
activity_na$interval[is.na(activity_na$steps)]
daysteps
daysteps$mean.steps
class(daysteps)
?rownames
daysteps <- data.frame(tapply(activity$steps, activity$interval, mean, na.rm=TRUE),rownames=F)
colnames(daysteps) <- "mean.steps"
head(daysteps)
daysteps$meansteps[1]
daysteps$meansteps[2]
daysteps$meansteps[5
]
daysteps$meansteps
daysteps$mean.steps[1]
x <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
daysteps <- data.frame("interval" = names(x),"mean.steps" = x)
head(daysteps)
aggregate(activity$interval~activity$steps, mean)
aggregate(activity$interval~activity$steps, FUN = mean)
aggregate(activity$steps~activity$interval, FUN = mean)
,
?aggregate
colnames(daysteps) <- c("intervals","mean.steps")
plot(daysteps$intervals, daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
seq(0,287)
intervals <- unique(activity$interval)
daysteps <- aggregate(activity$steps ~ activity$interval, FUN = mean)
colnames(daysteps) <- c("intervals","mean.steps")
plot(seq(0,287), daysteps$mean.steps, type = "l", xlab = "5 Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=c(seq(0,254,by=36),287),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
maxsteps <- daysteps$interval[daysteps$mean.steps == max(daysteps$mean.steps),1]
maxsteps <- daysteps$interval[daysteps$mean.steps == max(daysteps$mean.steps)]
maxsteps
?str
y<-str(835)
y[1]
y<-as.string(835)
y<-as.text(835)
stepstats
print("Mean = ",mean(sums))
print("Mean = " mean(sums))
print(c("Mean = ", mean(sums))
)
print(c("Mean = ", round(mean(sums),1)))
print(c(Mean = round(mean(sums),1)))
print(c(Median = round(median(sums),1)))
print(c(Median round(median(sums),1)))
print(c(Median <- round(median(sums),1)))
print(c(Median, round(median(sums),1)))
print(c(Median = round(median(sums),1)))
print(Maximum average steps in a five-minute interval is maxsteps)
print(c(Maximum average steps in a five-minute interval is maxsteps)
print(c("Maximum average steps for a five-minute interval is" maxsteps)
activity_na$steps[is.na(activity_na$steps)] <- intsteps$mean.steps[intsteps$interval == activity_na$interval[is.na(activity_na$steps)]]
intervals <- unique(activity$interval)
intsteps <- aggregate(activity$steps ~ activity$interval, FUN = mean)
plot(seq(0,287), intsteps$mean.steps, type = "l", xlab = "5-Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=c(seq(0,254,by=36),287),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
intsteps <- aggregate(activity$steps ~ activity$interval, FUN = mean)
colnames(daysteps) <- c("intervals","mean.steps")
plot(seq(0,287), intsteps$mean.steps, type = "l", xlab = "5-Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
head(intsteps)
colnames(intsteps) <- c("intervals","mean.steps")
plot(seq(0,287), intsteps$mean.steps, type = "l", xlab = "5-Minute Interval", ylab = "Average Number of Steps", main = "Average Steps During 5 Minute Intervals",xaxt="n")
axis(1,at=c(seq(0,254,by=36),287),labels=c("0:00","3:00","6:00","9:00","12:00","15:00","18:00","21:00","23:55"))
maxstepinterval <- intsteps$interval[intsteps$mean.steps == max(intsteps$mean.steps)]
maxstepinterval
dim(activity)[1]-sum(complete.cases(activity))
sum(is.na(activity))
activity_na <- activity
activity_na$steps[is.na(activity_na$steps)] <- intsteps$mean.steps[intsteps$interval == activity_na$interval[is.na(activity_na$steps)]]
View(activity_na)
activity_na$steps[is.na(activity_na$steps)]
?data.table
library(ddply)
ddply
?ddply
?ifelse
activity_na <- activity
ifelse(is.na(activity_na$steps)=TRUE, insteps$mean.steps[insteps$interval == activity_na$interval],activity_na$steps)
ifelse(is.na(activity_na$steps)==TRUE, insteps$mean.steps[insteps$interval == activity_na$interval],activity_na$steps)
ifelse(is.na(activity_na$steps)==TRUE, intsteps$mean.steps[intsteps$interval == activity_na$interval],activity_na$steps)
?mutate
library(ddply)
library(plyr)
activity_na$intavg <- intsteps$mean.steps
View(activity_na)
?replace
for (i in activity_na$steps)
if (activity_na$steps[i] == "NA")
activity_na$steps[i] <- activity_na$intavg[i]
activity_na$steps[i] <- activity_na$intavg[i] }}
for (i in activity_na$steps) {
if (activity_na$steps[i] == "NA") {
activity_na$steps[i] <- activity_na$intavg[i]
}
}
for (i in activity_na$steps) {
if (activity_na$steps[i] == "NA") == TRUE {
activity_na$steps[i] <- activity_na$intavg[i]
}
}
for (i in 1:length(activity_na$steps) {
if (activity_na$steps[i] == "NA") == TRUE {
activity_na$steps[i] <- activity_na$intavg[i]
}
}
for (i in 1:length(activity_na$steps) {
if (activity_na$steps[i] == "NA") == TRUE
{activity_na$steps[i] <- activity_na$intavg[i]}
else {}
}
for (i in 1:length(activity_na$steps) {
if (activity_na$steps[i] == "NA") == TRUE
{activity_na$steps[i] <- activity_na$intavg[i]}
else {next}
}
for (i in 1:length(activity_na$steps)) {
if (activity_na$steps[i] == "NA") == TRUE
{activity_na$steps[i] <- activity_na$intavg[i]}
else {next}
}
for (i in 1:length(activity_na$steps)) {
if ((activity_na$steps[i] == "NA") == TRUE)
{activity_na$steps[i] <- activity_na$intavg[i]}
else {next}
}
for (i in 1:length(activity_na$steps)) {
if (activity_na$steps[i] == "NA") == TRUE {
activity_na$steps[i] <- activity_na$intavg[i]}
else {next}
}
!complete.cases(activity)
activity_na$steps[!complete.cases(activity_na)] <- activity_na$intavg[!complete.cases(activity_na)]
View(activity_na)
?frep
?grep
grep(!complete.cases(activity_na))
grep(!complete.cases(activity_na),"TRUE")
!complete.cases(activity)na == TRUE
!complete.cases(activity)na == "TRUE"
!complete.cases(activity_na) == "TRUE"
activity_na <- activity
activity_na$intavg <- intsteps$mean.steps
activity_na$steps[!complete.cases(activity_na) == "TRUE"] <- activity_na$intavg[!complete.cases(activity_na) == "TRUE"]
View(activity_na)
activity_na <- activity
activity_na$intavg <- intsteps$mean.steps
View(activity_na)
activity_na$steps[!complete.cases(activity_na) == "TRUE"] <- activity_na$intavg[!complete.cases(activity_na) == "TRUE"]
View(activity_na)
activity_na$steps[!complete.cases(activity_na) == "TRUE"]
activity_na <- activity
activity_na$intavg <- intsteps$mean.steps
activity_na$steps[!complete.cases(activity_na) == "TRUE"] <- activity_na$intavg[!complete.cases(activity_na) == "TRUE"]
View(activity_na)
activity_nona <- activity
activity_nona$intavg <- intsteps$mean.steps
activity_nona$steps[!complete.cases(activity_nona) == "TRUE"] <- activity_nona$intavg[!complete.cases(activity_nona) == "TRUE"]
sums_nona <- tapply(activity_nona$steps, activity_nona$date, sum, na.rm=TRUE)hist(activity_, main="Histogram of Total Steps per Day", ylab="Days", xlab="Number of Steps", col="blue", breaks=8)
sums_nona <- tapply(activity_nona$steps, activity_nona$date, sum, na.rm=TRUE)
hist(activity_, main="Histogram of Total Steps per Day", ylab="Days", xlab="Number of Steps", col="blue", breaks=8)
hist(sums_nona, main="Histogram of Total Steps per Day", ylab="Days", xlab="Number of Steps", col="blue", breaks=8)
print(c(Mean = round(mean(sums_nona),1)))
print(c(Median = round(median(sums_nona),1)))
mean <- mean(sums)
median <- median(sums)
print(c(Mean = round(mean,1)))
print(c(Median = round(median,1)))
intervals <- unique(activity$interval)
intsteps <- aggregate(activity$steps ~ activity$interval, FUN = mean)
mean_sum <- mean(sums)
median_sum <- median(sums)
print(c(Mean = round(mean,1)))
print(c(Median = round(median,1)))
mean_sum <- mean(sums)
median_sum <- median(sums)
print(c(Mean = round(mean,1)))
print(c(Median = round(median,1)))
intervals <- unique(activity$interval)
intsteps <- aggregate(activity$steps ~ activity$interval, FUN = mean)
